install.packages('devtools')
library(devtools)
devtools::install_github('physicsland/ezids')
library(ezids)
xkablesummary
xkablesummary(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
cdwd
getwd
getwd()
setwd("C:/Users/JDS221/GWU/DATS6101/homework/hw5")
getwd()
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(results="markup", warning = F, message = F)
options(scientific=T, digits = 3)
# The package "ezids" (EZ Intro to Data Science) includes some helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# You will need to install it (once) from GitHub.
# library(devtools)
# devtools::install_github("physicsland/ezids")
# Then load the package in your R session.
library(ezids)
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(results="markup", warning = F, message = F)
options(scientific=T, digits = 3)
# 1. Do not provide answers/comments inside code blocks (like here) -- those are notes between coders/self and will be ignored for grading.
# 2. Make sure your knitr options are set to include all results/code to be graded in the final document.
# 3. All charts/graphs/tables should have appropriate titles/labels/captions.
# 4. Compose your answers using inline R code instead of using the code-block output as much as you can.
# 5. Your grade is also determined by the style. Even if you answer everything correctly, but the .html does not look appealing, you will not get full credit. Pay attention to the details that we mentioned in class/homework and in previous sample .Rmd files. For example, how to use #, ##, ###, ..., bold face, italics, inline codes, tables, ..., {results = "asis"}, use of colors in plots/ggplots, and so forth.
grad_school_admissions <- read.csv("LogRegAdmit.csv")
as.factor(grad_school_admissions$admit)
as.factor(grad_school_admissions$rank)
grad_school_admissions
grad_school_admissions <- read.csv("LogRegAdmit.csv")
grad_school_admissions$admit <- as.factor(grad_school_admissions$admit)
grad_school_admissions$rank <- as.factor(grad_school_admissions$rank)
grad_school_admissions
qt(0.80, df=nrows(grad_school_admissions)-1)
qt(0.80, df=(nrows(grad_school_admissions)-1))
qt(0.80, df=(nrow(grad_school_admissions)-1))
qt(0.80, df=(nrow(grad_school_admissions)-1))
qt(0.99, df=(nrow(grad_school_admissions)-1))
t.test(x=grad_school_admissions$gre, conf.level=0.80)
t.test(x=grad_school_admissions$gre, conf.level=0.99)
t.test(x=grad_school_admissions$gpa, conf.level=0.80)
t.test(x=grad_school_admissions$gpa, conf.level=0.99)
t.test(x=grad_school_admissions$gre[grad_school_admissions$admit == 1], conf.level=0.80)
#t.test(x=grad_school_admissions$gre, conf.level=0.99)
t.test(x=grad_school_admissions$gre[grad_school_admissions$admit == 1], conf.level=0.80)
t.test(x=grad_school_admissions$gre[grad_school_admissions$admit == 0], conf.level=0.80)
#t.test(x=grad_school_admissions$gre, conf.level=0.99)
t.test(x=grad_school_admissions$gre[grad_school_admissions$admit == 1], conf.level=0.80)
t.test(x=grad_school_admissions$gre[grad_school_admissions$admit == 0], conf.level=0.80)
t.test(x=grad_school_admissions$gre[grad_school_admissions$admit == 1], conf.level=0.99)
t.test(x=grad_school_admissions$gre[grad_school_admissions$admit == 0], conf.level=0.99)
ggplot()
# The package "ezids" (EZ Intro to Data Science) includes some helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# You will need to install it (once) from GitHub.
# library(devtools)
# devtools::install_github("physicsland/ezids")
# Then load the package in your R session.
library(ezids)
library(ggplot2)
ggplot()
ggplot(grad_school_admissions, aes() +
geom_boxplot())
ggplot(grad_school_admissions$gre, aes() +
geom_boxplot())
ggplot(grad_school_admissions$gre, aes(x=rank) +
geom_boxplot())
ggplot(grad_school_admissions, aes(x=rank, y=gre) +
geom_boxplot())
ggplot(grad_school_admissions, aes(x=rank, y=gre, fill=admit) +
geom_boxplot()
)
ggplot(grad_school_admissions, aes(x=rank, y=gre, fill=admit)) +
geom_boxplot()
)
ggplot(grad_school_admissions, aes(x=rank, y=gre)) +
geom_boxplot()
)
ggplot(grad_school_admissions, aes(x=rank, y=gre)) +
geom_boxplot()
ggplot(grad_school_admissions, aes(x=rank, y=gre)) +
geom_boxplot()
labs(title="GRE Scores by Ranking",
x="",
y="")
ggplot(grad_school_admissions, aes(x=rank, y=gre)) +
geom_boxplot()
labs(title="GRE Scores by Ranking",
x="Ranking",
y="GRE Score")
ggplot(grad_school_admissions, aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores by Ranking",
x="Ranking",
y="GRE Score")
ggplot(grad_school_admissions[grad_school_admissions$admit == 1], aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores by Ranking",
x="Ranking",
y="GRE Score")
ggplot(subset(grad_school_admissions, admit==1), aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores by Ranking",
x="Ranking",
y="GRE Score")
ggplot(subset(grad_school_admissions, admit==1), aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores of Admitted Students by Ranking",
x="Ranking",
y="GRE Score")
ggplot(subset(grad_school_admissions, admit==0), aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores of Rejected Students by Ranking",
x="Ranking",
y="GRE Score")
ggplot(subset(grad_school_admissions, admit==1), aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores of Admitted Students by Ranking",
x="Ranking",
y="GRE Score") +
scale_y_continuous(limits = (200,850), breaks = seq(200, 850, by = 100))
ggplot(subset(grad_school_admissions, admit==1), aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores of Admitted Students by Ranking",
x="Ranking",
y="GRE Score") +
scale_y_continuous(limits = c(200,850), breaks = seq(200, 850, by = 100))
ggplot(subset(grad_school_admissions, admit==0), aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores of Rejected Students by Ranking",
x="Ranking",
y="GRE Score")
ggplot(subset(grad_school_admissions, admit==1), aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores of Admitted Students by Ranking",
x="Ranking",
y="GRE Score") +
scale_y_continuous(limits = c(200,800), breaks = seq(200, 850, by = 100))
ggplot(subset(grad_school_admissions, admit==0), aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores of Rejected Students by Ranking",
x="Ranking",
y="GRE Score") +
scale_y_continuous(limits = c(200,800), breaks = seq(200, 850, by = 100))
t.test(x=grad_school_admissions$gpa[grad_school_admissions$admit == 1], conf.level=0.80)
t.test(x=grad_school_admissions$gpa[grad_school_admissions$admit == 0], conf.level=0.80)
t.test(x=grad_school_admissions$gpa[grad_school_admissions$admit == 1], conf.level=0.99)
t.test(x=grad_school_admissions$gpa[grad_school_admissions$admit == 0], conf.level=0.99)
admitted_students = subset(grad_school_admissions, admit==1)
rejected_students = subset(grad_school_admissions, admit==0)
t.test(x=admitted_students$gre, conf.level=0.80)
t.test(x=rejected_students$gre, conf.level=0.80)
t.test(x=admitted_students, conf.level=0.99)
admitted_students = subset(grad_school_admissions, admit==1)
rejected_students = subset(grad_school_admissions, admit==0)
t.test(x=admitted_students$gre, conf.level=0.80)
t.test(x=rejected_students$gre, conf.level=0.80)
t.test(x=admitted_students$gre, conf.level=0.99)
t.test(x=rejected_students$gre, conf.level=0.99)
ggplot(admitted_students, aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores of Admitted Students by Ranking",
x="Ranking",
y="GRE Score") +
scale_y_continuous(limits = c(200,800), breaks = seq(200, 850, by = 100))
ggplot(rejected_students, aes(x=rank, y=gre)) +
geom_boxplot() +
labs(title="GRE Scores of Rejected Students by Ranking",
x="Ranking",
y="GRE Score") +
scale_y_continuous(limits = c(200,800), breaks = seq(200, 850, by = 100))
t.test(x=admitted_students$gpa, conf.level=0.80)
t.test(x=rejected_students$gpa, conf.level=0.80)
t.test(x=admitted_students$gpa, conf.level=0.99)
t.test(x=rejected_students$gpa, conf.level=0.99)
ggplot(admitted_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GRE Scores of Admitted Students by Ranking",
x="Ranking",
y="GRE Score") +
#scale_y_continuous(limits = c(200,800), breaks = seq(200, 850, by = 100))
ggplot(rejected_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GRE Scores of Rejected Students by Ranking",
x="Ranking",
y="GRE Score") +
#scale_y_continuous(limits = c(200,800), breaks = seq(200, 850, by = 100))
ggplot(admitted_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GRE Scores of Admitted Students by Ranking",
x="Ranking",
y="GRE Score")
#scale_y_continuous(limits = c(200,800), breaks = seq(200, 850, by = 100))
ggplot(rejected_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GRE Scores of Rejected Students by Ranking",
x="Ranking",
y="GRE Score") +
#scale_y_continuous(limits = c(200,800), breaks = seq(200, 850, by = 100))
ggplot(admitted_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GRE Scores of Admitted Students by Ranking",
x="Ranking",
y="GRE Score") +
scale_y_continuous(limits = c(0,4), breaks = seq(0, 4, by = 1))
ggplot(rejected_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GRE Scores of Rejected Students by Ranking",
x="Ranking",
y="GRE Score") +
#scale_y_continuous(limits = c(200,800), breaks = seq(200, 850, by = 100))
ggplot(admitted_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GRE Scores of Admitted Students by Ranking",
x="Ranking",
y="GRE Score") +
scale_y_continuous(limits = c(0,4), breaks = seq(0, 4, by = 1))
ggplot(rejected_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GRE Scores of Rejected Students by Ranking",
x="Ranking",
y="GRE Score")
#scale_y_continuous(limits = c(200,800), breaks = seq(200, 850, by = 100))
ggplot(admitted_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GRE Scores of Admitted Students by Ranking",
x="Ranking",
y="GRE Score") +
scale_y_continuous(limits = c(2,4), breaks = seq(2, 4, by = 0.5))
ggplot(rejected_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GRE Scores of Rejected Students by Ranking",
x="Ranking",
y="GRE Score") +
scale_y_continuous(limits = c(2,4), breaks = seq(2, 4, by = 0.5))
ggplot(admitted_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GPA of Admitted Students by Ranking",
x="Ranking",
y="GPA") +
scale_y_continuous(limits = c(2,4), breaks = seq(2, 4, by = 0.5))
ggplot(rejected_students, aes(x=rank, y=gpa)) +
geom_boxplot() +
labs(title="GPA of Rejected Students by Ranking",
x="Ranking",
y="GPA") +
scale_y_continuous(limits = c(2,4), breaks = seq(2, 4, by = 0.5))
getwd()
setwd("C:/Users/JDS221/GWU/DATS6101/projects/DATS6101_Project")
getwd()
dir
ls
getwd()
setwd("C:/Users/JDS221/GWU/DATS6101/projects/DATS6101_Project/notebook")
setwd("C:/Users/JDS221/GWU/DATS6101/projects/DATS6101_Project/notebooks")
system("pip install kaggle", intern = TRUE)  # Ensure Python and pip are installed
knitr::opts_chunk$set(echo = TRUE)
install.packages("httr")
install.packages("jsonlite")
install.packages("data.table")  # If dealing with CSV files
install.packages("httr")
install.packages("jsonlite")
install.packages("data.table")  # If dealing with CSV files
getwd()
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("/../data/fitbit/Fitabase Data 3.12.16-4.11.16\weightLogInfo_merged.csv")
df <- read.csv("/../data/fitbit/Fitabase Data 3.12.16-4.11.16/weightLogInfo_merged.csv")
